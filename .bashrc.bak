# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]
then
    PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
if [ -d ~/.bashrc.d ]; then
	for rc in ~/.bashrc.d/*; do
		if [ -f "$rc" ]; then
			. "$rc"
		fi
	done
fi

unset rc

eval "$(starship init bash)"
. "$HOME/.cargo/env"

#======================   fayez-Defined Commands   ========================

echo "                                                  Bismillahir Rahmanir Rahim              "
echo ""
echo ""
neofetch




alias jupyter='gnome-terminal -- jupyter "$@"';
alias ping='ping -c 5'
alias tree='tree -L 2'
alias lsdir='find ./ -maxdepth 1 -type d'
alias vim='vimx'

vimn()
{
   alacritty -e vimx "$@" & 
}

createFiles()
{
# $@ selects all the arguments
# $# says the total number of arguments passed
# ${@:start_pos:end_pos} used in this format for slicing

    touch "${@:1:$#-1}";

    if [[ "${@:$#}" == 'c' ]]
    then
        code "${@:1:$#-1}";
        
    elif [[ "${@:$#}" == 'v' ]]
    then
        vimn -p "${@:1:$#-1}";

    fi
}


mkdirc()
{
    mkdir -p  "$@";
    cd $_;
}


syncpac()
{
    sudo dnf check-update && sudo dnf -y upgrade;
}


activateenv()
{
    cd ./env/*_env/;
    source ./bin/activate; 
    cd ./../..;
}


createEnv()
{

    # this function takes two positional arguments. 
    # $1 : environment name, (mandatory)
    # $2 : requirements file name, (if environment should be created from a requirements file)

    local req=${2:-0} 
    mkdirc ./env;
    python3 -m virtualenv "${1}_env";
    cd ./..;
    activateenv;

    if [[ -r "$req" ]]
    then
        echo -e "\n\033[1;32mINSTALLING REQUIREMENTS\n\033[0m"
        pip3 install --requirement "$req"
    fi

}


runp()
{
    echo -e "\n\033[1;32mEXECUTING APPLICATION:\n\033[0m"

    file_name=$(find ./build/ -maxdepth 1 -executable -type f);
    $file_name
}


crprs()
{
    file_name=${PWD##*/}

    cp ./../templates/template.cpp "${file_name}.cpp"
    createFiles "${file_name}.cpp" "${file_name}.py" v;
}

cpclip()
{
    more "${1}" | xclip -selection clipboard
}


 # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> END <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


